insert_beat(now, source, palette_position) {
    Buffer memory("memory");
    Buffer past_beats("past_beats");
    Buffer crucible("crucible");
    Buffer crucible_cursor("crucible_cursor");
    Buffer last_cleaned("last_cleaned");
    Buffer starting_frame("starting_frame");
    Buffer unlocked_start("unlocked_start");
	Buffer memory_cursor("memory_cursor");
	//Ideally new beats would be added at the highest 
	//index rather than 0 and the extra processing of 
	//shifting all the indices saved for cleanup, but 
	//this would turn everything upside down
    beats_in_memory = peek(past_beats, 0);
    for(i = beats_in_memory; i >= 0; i -= 1) {
        for(j = 0; j < channels(memory); j += 1) {
            poke(memory, peek(memory, i - 1, j), i, j);
        }
    }
    poke(memory, now, 0, 0);
    poke(memory, now, 0, 1);
    poke(memory, source, 0, 2);
    poke(memory, 0, 0, 3);  //Scores are updated in analyze() but are zeroed out here first in case 
    poke(memory, 0, 0, 4);  //of a miss (forced or otherwise)
    song_start = peek(starting_frame, 0);   
    if(!song_start) {                       //if no song_start it's implied to be jamming, not recitation
        first_hit = peek(unlocked_start, 0);
        if(first_hit) {
            poke(memory, 0, 0, 5);          //Set to 0 so final unlocked_start will be used at cleanup
        }
        else {                              //Unlocked misses must have song_start set to something
            poke(memory, now, 0, 5);        //Using `now` give them each their own pass, auditioning as 
        }                                   //1st note in song, which works well enough
    }                                       
    else {                                  
        poke(memory, song_start, 0, 5);
    }
    poke(memory, palette_position, 0, 6);
    //Increment everything that's keeping track of a memory index
    poke(past_beats, peek(past_beats, 0) + 1, 0);
	if(peek(memory_cursor, 0) >= 0) {
    	poke(memory_cursor, peek(memory_cursor, 0) + 1, 0);
	}
    for(j = 1; j <= channels(crucible); j += 1) {
    	for(i = 0; i < peek(crucible_cursor, 0, j); i += 1) {
            poke(crucible, peek(crucible, i, j) + 1, i, j);
        }
    }
    for(j = 1; j <= channels(last_cleaned); j += 1) {
        oldest_competitor = peek(last_cleaned, 0, j);
        if(oldest_competitor) {      //A competitor may not have been found yet (should remain 0)
            poke(last_cleaned, oldest_competitor + 1, 0, j);
        }
    }
    return 0;
}