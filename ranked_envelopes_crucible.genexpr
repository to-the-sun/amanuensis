place_cue(track, frame, release) { 
    Buffer prior_cue_by_palette("prior_cue_by_palette");
    Buffer stats("stats");
    Buffer wake("wake");
    Buffer palette_by_track("palette_by_track");
    Buffer cues("cues");
    Buffer cues_cursor("cues_cursor");
    Buffer sequence("sequence");
    Buffer beats_by_track("beats_by_track");
    click = peek(stats, 6);
    palette = peek(palette_by_track, track);
    song_start = peek(prior_cue_by_palette, 2, palette);
    start_frame = peek(prior_cue_by_palette, 0, palette);
    track_length = peek(beats_by_track, track);
    start = (start_frame - song_start) % track_length;  //Ramp position (start of attack). Everything stored in absolute frames except track_length
    span = peek(prior_cue_by_palette, 1, palette);  //Span ID *Actually score now
    pass = song_start;  //Pass (Starting_frame)
    peak_frame = peek(prior_cue_by_palette, 4, palette);
    attack = peak_frame - start_frame;
    palette_position = peek(prior_cue_by_palette, 3, palette) - attack;  //Palette position (not in frames, keeps its own ms count)
    peak_position = start + (attack / click);                             //Peak ramp position (should be obsolete when filtering/recitation are done in gen)
    ms = round(start);
    occupied, clone = compare_cues(ms, palette_position, attack, track);
    while(occupied) {
        ms += 1;
        occupied, clone = compare_cues(ms, palette_position, attack, track);
    }
    if(clone) {
    	cue = peek(sequence, ms);
        poke(cues, span, cue, 0);   //always placed in channel 0
    }
    else {
        cue = peek(cues_cursor, 0);
        poke(cues, span, cue, 0);
        poke(cues, .9, cue, 1);     //Viable, but not yet activated
        poke(cues, pass, cue, 2);
        poke(cues, palette_position, cue, 3);
        poke(cues, attack, cue, 4);
        poke(cues, release, cue, 5);
        poke(cues, -track, cue, 6);
        poke(cues, peak_position, cue, 7);
        poke(sequence, cue, ms);
        poke(cues_cursor, cue + 1, 0);
    }
    if(release == peek(wake, 0)) {                      //this stat must be provided for the info update that will
        poke(prior_cue_by_palette, frame, 4, palette);  //occur momentarily, as it will become the start_frame of the
    }                                                   //next cue (deliberately setting attack of next cue to 0)
    return start, span, pass, palette_position, attack, release, track, peak_position;
}
place_span(track) {
    Buffer recording_spans("recording_spans");
    Buffer stats("stats");
    Buffer spans("spans");
    click = peek(stats, 6);
    song_start = peek(recording_spans, 1, track);
    span = peek(recording_spans, 0, track);
    start = (peek(recording_spans, 2, track) - song_start) / click;
    end = (peek(recording_spans, 3, track) - song_start) / click;
    rating = end - start;
    poke(spans, track, span, 0);
    poke(spans, start, span, 1);
    poke(spans, end, span, 2);
    poke(recording_spans, 0, 0, track);
    poke(recording_spans, 0, 1, track);
    poke(recording_spans, 0, 2, track);
    poke(recording_spans, 0, 3, track);
    return span, start, rating, end, track;
}
compare_cues(ms, palette_position, attack, track) {
    Buffer cues("cues");
    Buffer sequence("sequence");
    cue = peek(sequence, ms);
    clone = 0;
    if(round(peek(cues, cue, 3), .0001) == round(palette_position, .0001)) {
        if(round(peek(cues, cue, 4), .0001) == round(attack, .0001)) {
            if(abs(peek(cues, cue, 6)) == track) {
                clone = 1;
            }
        }
    }
    occupied = cue && !clone;
    return occupied, clone;
}
get_song_start(oldest_index, track) {               //These inputs could be consolidated/generalized
    Buffer memory("memory");
    Buffer recording_spans("recording_spans");
    Buffer unlocked_start("unlocked_start");
    song_start = peek(memory, oldest_index, 5);
    span_recording = peek(recording_spans, 0, track);
    //if(!span_recording) {
        if(!song_start) {
            song_start = peek(unlocked_start, 0);
        }
    //}
    //else {
    //    song_start = peek(recording_spans, 1, track);
    //}
    return song_start;
}
place(scrutinized_memory, record, source) {
	Buffer wake("wake");
	Buffer tolerance("tolerance");
    Buffer stats("stats");
    Buffer crucible("J_crucible");
    Buffer memory("memory");
    Buffer palette_by_track("palette_by_track");
    Buffer diagnostics("diagnostics");
    Buffer recording_spans("recording_spans");
    Buffer top_span("top_span");
    Buffer prior_cue_by_palette("prior_cue_by_palette");
    Buffer span_log("span_log");
    Buffer span_start_log("span_start_log");
    Buffer span_end_log("span_end_log");
    WAKE = peek(wake, 0);
    TOLERANCE = peek(tolerance, 0);
    OUT2 = 0;
    OUT3 = 0;
    OUT4 = 0;
    OUT5 = 0;
    OUT6 = 0;
    OUT7 = 0;
    OUT8 = 0;
    OUT9 = 0;
    OUT10 = 0; 
    OUT11 = 0;
    OUT12 = 0;
    OUT13 = 0;
    OUT14 = 0;
    click = peek(stats, 6); //Song can end and click clear before memory clean and all cues placed, but with click obsolete this will be irrelevant
    track = abs(source);
    //scrutinized_memory = peek(crucible, scrutinized_chamber, track);
    frame = peek(memory, scrutinized_memory, 0);
    //source = peek(memory, scrutinized_memory, 2);
    palette = peek(palette_by_track, track);
    //poke(diagnostics, scrutinized_chamber, 4);
    poke(diagnostics, scrutinized_memory, 5);
    poke(diagnostics, frame, 6);
    poke(diagnostics, 0, 7);
    poke(diagnostics, 0, 8);
    //poke(memory, record, scrutinized_memory, 4);    //Temporarily store active state in vibe until cue is placed (in prep of spanless)
    //Check flush, then proceed
    span_end = peek(recording_spans, 3, track);
    if(span_end && frame > span_end + WAKE + TOLERANCE) {     //If flushed, span will be placed then ordinary check
        OUT2, OUT3, OUT4, OUT5, OUT6 = place_span(track);   // will either start a span or do nothing, because there
    }                                                       // will be no span_recording
    span_recording = peek(recording_spans, 0, track);
    if(record) {
        if(!span_recording) {
            song_start = get_song_start(scrutinized_memory, track);   //Must happen before span starts being documented
            poke(top_span, peek(top_span, 0) + 1, 0);
            poke(recording_spans, peek(top_span, 0), 0, track);  //Span ID
            poke(recording_spans, song_start, 1, track); //Starting frame of song (stored with span so cues can reference it later)
            poke(recording_spans, frame - (TOLERANCE * 4), 2, track); //Start of span (still in absolute frames)
        }
        poke(recording_spans, frame + (TOLERANCE * 4), 3, track);     //Current end of span (still in absolute frames)
    }
    else {  //Have span end if(!record || loop_end surpassed)
        if(span_recording) {
            OUT2, OUT3, OUT4, OUT5, OUT6 = place_span(track);
        }
    }
    //Check flush
    peak_frame = peek(prior_cue_by_palette, 4, palette);
    start_frame = peek(prior_cue_by_palette, 0, palette);
    if(peak_frame && start_frame) {    //Peak_frame & start_frame = 0 on scan loop to prevent chopped up cues
        if(frame > peak_frame + WAKE + TOLERANCE) {
            OUT7, OUT8, OUT9, OUT10, OUT11, OUT12, OUT13, OUT14 = place_cue(track, frame, WAKE);
        }
        else if(peak_frame != frame) {    //prevents those 1st non-beat cues/unnecessary clutter *necessary anymore?
            OUT7, OUT8, OUT9, OUT10, OUT11, OUT12, OUT13, OUT14 = place_cue(track, frame, frame - peak_frame);
        }
    }
    //Update info for next cue
    next_start_frame = peek(prior_cue_by_palette, 4, palette);
    song_start = get_song_start(scrutinized_memory, track);
    if(next_start_frame) {    //As long as the next cue's start_frame should actually exist (0 can't compete in max())…
        poke(prior_cue_by_palette, max(song_start, next_start_frame), 0, palette);    //… set it; max() crops if necessary
    }
    poke(prior_cue_by_palette, peek(memory, scrutinized_memory, 3), 1, palette);    //score
    poke(prior_cue_by_palette, song_start, 2, palette); //(Pass)
    poke(prior_cue_by_palette, peek(memory, scrutinized_memory, 6), 3, palette);
    poke(prior_cue_by_palette, frame, 4, palette);
    return OUT2, OUT3, OUT4, OUT5, OUT6, OUT7, OUT8, OUT9, OUT10, OUT11, OUT12, OUT13, OUT14;
}
decommission(index) {
    Buffer memory("memory");
    Buffer stats("stats");
    Buffer wake("wake");
    Buffer tolerance("tolerance");
    timestamp = 0;
    last_involved_at = 0;
    if(index >= 0) {    //Negative input averts cleanup (e.g. inverse could mark for cleanup what is still needed for crucible)
        last_involved_at = peek(memory, index, 1);
        if(last_involved_at > 0) {
            now = peek(stats, 0);
            if(now - last_involved_at > peek(wake, 0) + peek(tolerance, 0)) {
                timestamp = peek(memory, index, 0);   //Send out its unique timestamp 1st
                poke(memory, -last_involved_at, index, 1);
            }
        }
    }
    return timestamp;
}
_decommission(index, inversion) {
    Buffer memory("memory");
    Buffer stats("stats");
    Buffer wake("wake");
    Buffer tolerance("tolerance");
    timestamp = 0;
    last_involved_at = 0;
    flag = 0;
    if(index >= 0) {    //Negative input averts cleanup (e.g. inverse could mark for cleanup what is still needed for crucible)
        last_involved_at = peek(memory, index, 1);
        if(last_involved_at > 0) {
            now = peek(stats, 0);
            if(now - last_involved_at > peek(wake, 0) + peek(tolerance, 0)) {
                flag = peek(memory, index, 4);
                if(inversion == 1 && !floor(flag)) {
                    timestamp = peek(memory, index, 0);   //Send out its unique timestamp 1st
                    poke(memory, flag + 9, index, 4);
                }
                else if(inversion == -1 && !fract(flag)) {
                    timestamp = peek(memory, index, 0);   //Send out its unique timestamp 1st
                    poke(memory, flag + .9, index, 4);
                }
            }
        }
    }
    return timestamp;
}
scrutinize(inversion, crucible, crucible_cursor, older_competition) {
    Buffer wake("wake");
    Buffer tolerance("tolerance");
    Buffer top_span("top_span");
    Buffer stats("stats");
    Buffer memory("memory");
    Buffer memory_cursor("memory_cursor");
    Buffer max_voices("max_voices");
    Buffer envelopes("envelopes");
    Buffer rankings("rankings");
    //Buffer crucible("crucible");
    //Buffer crucible_cursor("crucible_cursor");
    Buffer last_cleaned("last_cleaned");
    Buffer past_beats("past_beats");
    Buffer at_oldest_on_track("at_oldest_on_track");
    Buffer starting_frame("starting_frame");
    Buffer recording_spans("recording_spans");
    Buffer last_cleaned_cue("last_cleaned_cue");
    Buffer palette_by_track("palette_by_track");
    Buffer prior_cue_by_palette("prior_cue_by_palette");
    //Buffer older_competition("older_competition");
    Buffer diagnostics("diagnostics");
    Param exporting(0);
    Param comping(0);
    Param loop_end(1);
    OUT1 = 0;
    OUT2 = 0;
    OUT3 = 0;
    OUT4 = 0;
    OUT5 = 0;
    OUT6 = 0;
    OUT7 = -1;
    OUT8 = 0;
    OUT9 = 0;
    OUT10 = 0;
    OUT11 = 0;
    OUT12 = 0;
    OUT13 = 0;
    OUT14 = 0;
    OUT15 = 0;
    OUT16 = 0;
    OUT17 = 0;
    oldest_index = peek(past_beats, 0) - 1;
    index = peek(memory_cursor, 0);
    index -= 1;  //Move one beat newer
    if(index < 0) {
        for(track = 1; track <= 16; track += 1) {
            poke(crucible, oldest_index, 0, track);    //If older_competition is -1 (aborting) crucible index 0 simply won't be used (Set to oldest_index to ward off cleanup)
            if(!peek(stats, 10)) {
                poke(crucible_cursor, 0, 0, track);    //If a competitor hasn't been found yet, cursor should be at 0, otherwise 1 *true. So there's no need to set it here 
            }                                           //(Except to reset between songs e.g. lock == 0)
            span_end = peek(recording_spans, 3, track);             //Flush any recording spans
            if(span_end) {  //Technically need last_cleaned_span to fill in recording_spans at this point otherwise spans will be split if only half gets cleaned. But then again hopefully it will have been placed already before it gets close to the end of memory. Also may not be an issue with crucible entirely in gen
                OUT2, OUT3, OUT4, OUT5, OUT6 = place_span(track);
            }
            palette = peek(palette_by_track, track);                //zero out any recording cues
            for(i = 0; i <= 4; i += 1) {
                poke(prior_cue_by_palette, 0, i, palette);  //Only peak_frame (4) and start_frame (0) necessary as this is what cue placement checks, but for cleanliness, reset them all
            }
        }
        index = oldest_index;    //Restart scan at top
    }
    //Moved outside to avoid triggering twice for J & R
    //poke(memory_cursor, index, 0);   //INCREMENTS ELSEWHERE WITH EACH NEW BEAT IN MEMORY
    if(index >= 0) {
        now = peek(stats, 0);
        WAKE = peek(wake, 0);
        TOLERANCE = peek(tolerance, 0);
        frame = peek(memory, index, 0);
        last_involved_at = peek(memory, index, 1);
        source = peek(memory, index, 2);
        track = abs(source);
        score = peek(memory, index, 3);
        record = peek(memory, index, 4);
        OUT15 = frame;
        OUT16 = score;
        OUT17 = source;
        poke(diagnostics, index, 0);
        poke(diagnostics, 0, 1);
        poke(diagnostics, 0, 4);
        poke(diagnostics, 0, 5);
        poke(diagnostics, 0, 6);
        poke(diagnostics, 0, 7);
        poke(diagnostics, 0, 8);
        if(source < 0) {    //Jamming only
            OUT2, OUT3, OUT4, OUT5, OUT6, OUT7, OUT8, OUT9, OUT10, OUT11, OUT12, OUT13, OUT14 = place(index, record, source);
        }
        OUT1 = decommission(index);
        poke(diagnostics, record, 3);
    }
    return index, OUT1, OUT2, OUT3, OUT4, OUT5, OUT6, OUT7, OUT8, OUT9, OUT10, OUT11, OUT12, OUT13, OUT14, OUT15, OUT16, OUT17;
}