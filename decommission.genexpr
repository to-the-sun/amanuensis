decommission(index, inversion) {
    Buffer memory("memory");
    Buffer stats("stats");
    Buffer wake("wake");
    Buffer tolerance("tolerance");
    timestamp = 0;
    last_involved_at = 0;
    flag = 0;
    if(index >= 0) {    //Negative input averts cleanup (e.g. inverse could mark for cleanup what is still needed for crucible)
        last_involved_at = peek(memory, index, 1);
        if(last_involved_at > 0) {
            now = peek(stats, 0);
            if(now - last_involved_at > peek(wake, 0) + peek(tolerance, 0)) {
                flag = peek(memory, index, 4);
                if(inversion == 1 && !floor(flag)) {
                    timestamp = peek(memory, index, 0);   //Send out its unique timestamp 1st
                    poke(memory, flag + 9, index, 4);
                }
                else if(inversion == -1 && !fract(flag)) {
                    timestamp = peek(memory, index, 0);   //Send out its unique timestamp 1st
                    poke(memory, flag + .9, index, 4);
                }
            }
        }
    }
    return timestamp;
}